from apscheduler.schedulers.blocking import BlockingScheduler
from src.bot.handlers import bot
from src.engine.analyzer import run_full_analysis
from src.config import USA_STOCKS_ID, CHAT_ID
import telebot
import logging

logger = logging.getLogger(__name__)


def send_analysis_report_job():
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    try:
        report = run_full_analysis()
        if not report or "[–û—à–∏–±–∫–∞" in report:
            logger.error(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –û—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {report}")
            return

        chat_id_int = int(CHAT_ID) if CHAT_ID else None
        topic_id_int = int(USA_STOCKS_ID) if USA_STOCKS_ID else None

        if chat_id_int and topic_id_int:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç {chat_id_int}, —Ç–æ–ø–∏–∫ {topic_id_int}")
            for part in telebot.util.smart_split(report, 4096):
                bot.send_message(
                    chat_id=chat_id_int,
                    text=part,
                    message_thread_id=topic_id_int,
                    parse_mode="Markdown"
                )
            logger.info("‚úÖ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            logger.error("CHAT_ID –∏–ª–∏ TOPIC_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env. –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}", exc_info=True)


def start_scheduler():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'Europe/Moscow' –∫–∞–∫ –ø—Ä–∏–º–µ—Ä. –ú–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
    scheduler = BlockingScheduler(timezone="Europe/Moscow")

    # –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    scheduler.add_job(send_analysis_report_job, 'cron', hour=9, minute=0)

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ú–°–ö.")
    logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {scheduler.get_jobs()[0].next_run_time}")

    scheduler.start()