from apscheduler.schedulers.blocking import BlockingScheduler
from src.bot.handlers import bot
from src.engine.analyzer import run_full_analysis
from src.config import CHAT_ID, TOPIC_CONFIGS
import telebot
import logging

logger = logging.getLogger(__name__)


def send_analysis_report_job(analysis_type: str):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è '{analysis_type}'...")

    analysis_config = TOPIC_CONFIGS.get(analysis_type)
    if not analysis_config:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ '{analysis_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    topic_id = analysis_config.get("id")
    if not CHAT_ID or not topic_id:
        logger.error(
            f"CHAT_ID –∏–ª–∏ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è '{analysis_type}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env. –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    try:
        report = run_full_analysis(analysis_config)
        if not report or "[–û—à–∏–±–∫–∞" in report:
            logger.error(
                f"–ê–Ω–∞–ª–∏–∑ '{analysis_type}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –û—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {report}")
            return

        chat_id_int = int(CHAT_ID)
        topic_id_int = int(topic_id)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ '{analysis_type}' –≤ —á–∞—Ç {chat_id_int}, —Ç–æ–ø–∏–∫ {topic_id_int}")
        for part in telebot.util.smart_split(report, 4096):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
                bot.send_message(
                    chat_id=chat_id_int,
                    text=part,
                    message_thread_id=topic_id_int,
                    parse_mode="Markdown"
                )
            except telebot.apihelper.ApiTelegramException as e:
                if "can't parse entities" in e.description:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –û—à–∏–±–∫–∞: {e.description}")
                    bot.send_message(
                        chat_id=chat_id_int,
                        text=part,
                        message_thread_id=topic_id_int
                    )
                else:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ –¥–∞–ª—å—à–µ
                    raise

        logger.info(f"‚úÖ –û—Ç—á–µ—Ç '{analysis_type}' –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ '{analysis_type}' –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}",
                        exc_info=True)


def start_scheduler():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    scheduler = BlockingScheduler(timezone="Europe/Moscow")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∞–∫—Ü–∏–π –°–®–ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    scheduler.add_job(send_analysis_report_job, 'cron', hour=9, minute=0, args=["USA_STOCKS"])

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # scheduler.add_job(send_analysis_report_job, 'cron', hour=10, minute=0, args=["CRYPTO"])

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ USA_STOCKS –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ú–°–ö.")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º get_schedules() –≤–º–µ—Å—Ç–æ get_jobs() –¥–ª—è APScheduler v4+
    schedules = scheduler.get_schedules()
    if schedules:
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedules[0].next_run_time}")

    scheduler.start()